<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sahir&#39;s blog</title>
    <link>https://sahirbhatnagar.github.io/blog/post/</link>
    <description>Recent content in Posts on Sahir&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Jun 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sahirbhatnagar.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>woodbury-ridge</title>
      <link>https://sahirbhatnagar.github.io/blog/2021/06/10/woodbury-ridge/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2021/06/10/woodbury-ridge/</guid>
      <description>library(myTridge) library(rsvd) library(ggplot2) library(glmnet) num.obs &amp;lt;- 500 num.par &amp;lt;- 5000 family &amp;lt;- &amp;quot;gaussian&amp;quot; data&amp;lt;-myTridge::genDataList(n = num.obs, mu = rep(0, num.par), p = num.par, rho = 0.2, beta = rnorm(num.par, mean = 0, sd = 1), SNR = 10, family = family) X &amp;lt;- data$normData y &amp;lt;- data$y X_new &amp;lt;- cbind(rep(1,num.obs),X) r &amp;lt;- 0.5 # tuning parameter tt &amp;lt;- bench::mark( svd = { ##### the following commands should only be calculated once for all tuning parameters #### mysvd &amp;lt;- base::svd(X_new) # uses the base implementation of svd R &amp;lt;- mysvd$u %*% diag(mysvd$d) RTR &amp;lt;- crossprod(R) # R^TR IN &amp;lt;- diag(num.</description>
    </item>
    
    <item>
      <title>GUI for Git</title>
      <link>https://sahirbhatnagar.github.io/blog/2020/06/29/gui-for-git/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2020/06/29/gui-for-git/</guid>
      <description>Git without the command line I use GitKraken as my preferred graphical user interface (GUI) for version control with git. Itâ€™s very intuitive, has nice a visual commit history, and my favorite feature is the drag and drop for merging branches. In this post, I list some of the most used features. I will also constantly update this post with new things I learn about this tool.
 Setting the default merge and diff tool Meld is the tool I use when I want to compare two (or more) files.</description>
    </item>
    
    <item>
      <title>Creating a website for your R package</title>
      <link>https://sahirbhatnagar.github.io/blog/2020/03/03/creating-a-website-for-your-r-package/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2020/03/03/creating-a-website-for-your-r-package/</guid>
      <description>Overview In this post, I try to outline the steps needed to create a website for your R package using the pkgdown package. In particular, I will show you how to get Travis-ci to automatically build the website and deploy it to your gh-pages branch on GitHub.
This tutorial assumes you have basic knowledge of Git commands pull, push, commit, and what a branch is. It also assumes working knowledge of R, and what continuous integration is.</description>
    </item>
    
    <item>
      <title>Intraclass correlation coefficient in Linear Mixed Effects Models</title>
      <link>https://sahirbhatnagar.github.io/blog/2020/01/10/intraclass-correlation-coefficient-in-linear-mixed-effects-models/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2020/01/10/intraclass-correlation-coefficient-in-linear-mixed-effects-models/</guid>
      <description>if (!requireNamespace(&amp;quot;pacman&amp;quot;)){ install.packages(&amp;quot;pacman&amp;quot;) } ## Loading required namespace: pacman pacman::p_load(sjstats) pacman::p_load(sjPlot) pacman::p_load(lme4) pacman::p_load(MASS) Simulate Data 100 participants will be ranking 20 items based on importance simulated from a multivariate normal distribution.
n.participants &amp;lt;- 100 n.items &amp;lt;- 20 Sigma &amp;lt;- 0.9 ^ toeplitz(1:n.items) diag(Sigma) &amp;lt;- 1 # Subject needs to be a factor for lmer DT &amp;lt;- data.frame(Subject_ID = factor(rep(1:n.participants, each = n.items)), Item = rep(1:n.items, n.participants), Importance = as.</description>
    </item>
    
    <item>
      <title>Calibration, Net Re-Classification Index and Goodness-of-Fit Test for Logistic Regression</title>
      <link>https://sahirbhatnagar.github.io/blog/2019/09/05/calibration-nri-goodness-of-fit-test-for-logistic-regression/</link>
      <pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2019/09/05/calibration-nri-goodness-of-fit-test-for-logistic-regression/</guid>
      <description>This post shows how to calculate the Net Re-Classification Index and Goodness-of-Fit Test (Hosmer-Lemeshow Test) for logistic regression models. In addition, we show how to plot the calibration curves.
# load packages ---------------------------------------------------------- if (!requireNamespace(&amp;quot;pacman&amp;quot;, quietly = TRUE)) { install.packages(&amp;quot;pacman&amp;quot;) } pacman::p_load(PredictABEL) pacman::p_load(aod) pacman::p_load(ggplot2) # packages for ggplot2 themes pacman::p_load(ggrepel) # colors and themes ------------------------------------------------------- # color blind palette cbbPalette &amp;lt;- c(&amp;quot;#999999&amp;quot;, &amp;quot;#E69F00&amp;quot;, &amp;quot;#56B4E9&amp;quot;, &amp;quot;#009E73&amp;quot;, &amp;quot;#F0E442&amp;quot;, &amp;quot;#0072B2&amp;quot;, &amp;quot;#D55E00&amp;quot;, &amp;quot;#CC79A7&amp;quot;) # my theme defaults gg_sy &amp;lt;- theme(legend.</description>
    </item>
    
    <item>
      <title>Command Line Arguments in R</title>
      <link>https://sahirbhatnagar.github.io/blog/2019/07/30/command-line-arguments-in-r/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2019/07/30/command-line-arguments-in-r/</guid>
      <description>In this post, I explain how I sometimes conduct simulation studies on a compute cluster. In this example, I simulate a toy dataset, fit a linear mixed model, and collect the resulting regression coefficients.
There are three main objectives which motivated this example:
I want to run many replications for a given simulation scenario while leveraging the many CPUs available on a compute cluster
 I want to alter the simulation parameters with minimal effort I want to collect the results from each simulation scenario into a single data.</description>
    </item>
    
    <item>
      <title>Variable Selection and Prediction in Competing Risk Regression</title>
      <link>https://sahirbhatnagar.github.io/blog/2019/04/16/variable-selection-prediction-competing-risk-regression/</link>
      <pubDate>Tue, 16 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2019/04/16/variable-selection-prediction-competing-risk-regression/</guid>
      <description>Objective The main goal of this post is to:
Show one way of performing variable selection in a competing risks regression model
 Evaluate the predictive performance for a list of models using resampling methods   What the data looks like We will use the bmtcrr dataset from the casebase package available on CRAN. Here is what the data looks like:
pacman::p_load(casebase) head(bmtcrr) ## Sex D Phase Age Status Source ftime ## 1 M ALL Relapse 48 2 BM+PB 0.</description>
    </item>
    
    <item>
      <title>Jekyll website with Hugo blog with blogdown</title>
      <link>https://sahirbhatnagar.github.io/blog/2019/04/12/jekyll-hugo-blogdown/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2019/04/12/jekyll-hugo-blogdown/</guid>
      <description>I currently have a Jekyll based website for my academic website hosted on GitHub using the al-folio theme.
What I like about having a Jekyll based site Jekyll has been around for a long time now and thus has extensive documentation and support online. I also like the Jekyll-based al-folio theme because:
It automatically generates publications from a BibTeX file using jekyll-scholar.
 Information can be spread across multiple pages (e.</description>
    </item>
    
    <item>
      <title>Getting Travis to Auto Push to GitHub</title>
      <link>https://sahirbhatnagar.github.io/blog/2018/08/23/getting-travis-to-auto-push-to-github/</link>
      <pubDate>Thu, 23 Aug 2018 15:09:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2018/08/23/getting-travis-to-auto-push-to-github/</guid>
      <description>Following the advice given on the bookdown site, I use Travis-CI to automatically build my bookdown book and push it to gh-pages. I always forget how to do this, so I&amp;rsquo;m writing these notes to supplement what is already written there.
 Follow these instructions on GitHub to create a personal access token (PAT) Copy the generated PAT to your clipboard From the command line and within the root directory of your repository hosting the source of the bookdown, enter the following command:  travis encrypt GITHUB_PAT=&#34;</description>
    </item>
    
    <item>
      <title>Documenting R Packages</title>
      <link>https://sahirbhatnagar.github.io/blog/2018/04/03/documenting-r-packages/</link>
      <pubDate>Tue, 03 Apr 2018 15:09:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2018/04/03/documenting-r-packages/</guid>
      <description>Some brief notes on my R package documentation workflow.
styler I first use the styler package for pretty-printing of R source code
pacman::p_load_gh(&amp;#34;r-lib/styler&amp;#34;) # run style_dir on R directory styler::style_dir(&amp;#34;./R&amp;#34;) prefixer Next I use the prefixer package to prefix all my functions with their NAMESPACE
pacman::p_load_gh(&amp;#34;dreamRs/prefixer&amp;#34;) # launch the addin via RStudio&amp;#39;s Addins menu sinew In a third step, I use the sinew package to generate a roxygen2 skeleton on all my R source code files</description>
    </item>
    
    <item>
      <title>I Am Color Blind</title>
      <link>https://sahirbhatnagar.github.io/blog/2018/04/03/i-am-color-blind/</link>
      <pubDate>Tue, 03 Apr 2018 15:09:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2018/04/03/i-am-color-blind/</guid>
      <description>I recently gave a mini-course on regression trees. As I talked about the red region in the following figure:
one of the audience members said they had no clue what I was referring to. It turns out they were color blind and could not identify the red region. Yikes!
Here is a colorblind friendly pallette courtesy of Cookbook for R
cbbPalette  </description>
    </item>
    
    <item>
      <title>Mixed Models with Kinship in R</title>
      <link>https://sahirbhatnagar.github.io/blog/2017/10/12/mixed-models-with-kinship-in-r/</link>
      <pubDate>Thu, 12 Oct 2017 15:09:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2017/10/12/mixed-models-with-kinship-in-r/</guid>
      <description>In this post, I describe how to estimate a kinship matrix and subsequently fit a mixed model using that estimated kinship. In particular, I show how this can be done on an arbitrary matrix of genotype data, which is not stored in plink format. I also show how to deal with missing genotypes.
Load Packages # install.packages(&amp;#34;gaston&amp;#34;) library(gaston) Set Simulation Parameters # number of subjects n &amp;lt;- 1000 # number of genotypes p &amp;lt;- 1e4 # number of causal genotypes p_causal &amp;lt;- 50 # Signal to noise ratio signal_to_noise_ratio &amp;lt;- 2 # vector of allele frequencies from which to sample probs &amp;lt;- c(0.</description>
    </item>
    
    <item>
      <title>Polygenic Risks Scores with data.table in R</title>
      <link>https://sahirbhatnagar.github.io/blog/2017/08/11/polygenic-risks-scores-with-data.table-in-r/</link>
      <pubDate>Fri, 11 Aug 2017 15:09:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2017/08/11/polygenic-risks-scores-with-data.table-in-r/</guid>
      <description>&lt;p&gt;In this short post, I show how to calculate &lt;a href=&#34;https://en.wikipedia.org/wiki/Polygenic_score&#34;&gt;polygenic risk scores&lt;/a&gt; (PRS) using the &lt;a href=&#34;https://cran.r-project.org/web/packages/data.table/vignettes/datatable-intro.html&#34;&gt;&lt;code&gt;data.table&lt;/code&gt;&lt;/a&gt; package in &lt;code&gt;R&lt;/code&gt;. I will show an example on a small dataset, but can be easily extended to much larger datasets. The PRS based on &lt;code&gt;$p$&lt;/code&gt; SNPs is given by:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$$ PRS_i = \sum_{j=1}^{p}\beta_j \times SNP_{ij} $$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where &lt;code&gt;$\beta_j$&lt;/code&gt; is the beta coefficient for the &lt;code&gt;$j^{th}$&lt;/code&gt; SNP, and &lt;code&gt;$SNP_{ij}$&lt;/code&gt; is the value of &lt;code&gt;$j^{th}$&lt;/code&gt; SNP for the &lt;code&gt;$i^{th}$&lt;/code&gt; individual.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bayesian Non-Linear Multilevel Models</title>
      <link>https://sahirbhatnagar.github.io/blog/2017/02/23/bayesian-non-linear-multilevel-models/</link>
      <pubDate>Thu, 23 Feb 2017 15:09:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2017/02/23/bayesian-non-linear-multilevel-models/</guid>
      <description>&lt;p&gt;Consider the following repeated measures model:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$$y_{ij} =\beta_0 + \beta_1 a_{ij}  + \beta_1^2 b_{ij} + \mu_i + \varepsilon_{ij}$$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;for &lt;code&gt;$i = 1, \ldots, n$&lt;/code&gt;, &lt;code&gt;$j = 1, 2$&lt;/code&gt; where &lt;code&gt;$n$&lt;/code&gt; is the sample size, &lt;code&gt;$j$&lt;/code&gt; represents the index of the repeated measure, i.e., each subject has two measurements, &lt;code&gt;$\mu_i$&lt;/code&gt; is a normally distributed random effect, &lt;code&gt;$\varepsilon_{ij}$&lt;/code&gt; is a normally distributed error term, &lt;code&gt;$y_{ij}$&lt;/code&gt; is the continuous response, and &lt;code&gt;$a_{ij}, b_{ij}$&lt;/code&gt; are covariates. This is a multilevel model because of the nested structure of the data, and also non-linear in the &lt;code&gt;$\beta_1$&lt;/code&gt; parameter. In this post I simulate some data under this model, and try to leverage Bayesian computation techniques to estimate the parameters using the &lt;a href=&#34;https://github.com/paul-buerkner/brms&#34;&gt;brms&lt;/a&gt; which is an interface to fit Bayesian generalized (non-)linear multilevel models using &lt;a href=&#34;http://mc-stan.org/&#34;&gt;Stan&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/r0IXN1w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Limma Moderated and Ordinary t-statistics</title>
      <link>https://sahirbhatnagar.github.io/blog/2017/02/07/limma-moderated-and-ordinary-t-statistics/</link>
      <pubDate>Tue, 07 Feb 2017 15:09:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2017/02/07/limma-moderated-and-ordinary-t-statistics/</guid>
      <description>&lt;p&gt;When analyzing large amounts of genetic and genomic data, the first line of analysis is usually some sort of univariate test. That is, conduct a statistical test for each SNP or CpG site or Gene and then correct for multiple testing. The &lt;a href=&#34;https://bioconductor.org/packages/release/bioc/html/limma.html&#34;&gt;limma&lt;/a&gt; package on Bioconductor is a popular method for computing &lt;em&gt;moderated&lt;/em&gt; t-statistics using a combination of the &lt;code&gt;limma::lmFit&lt;/code&gt; and &lt;code&gt;limma::eBayes&lt;/code&gt; functions. In this post, I show how to calculate the &lt;em&gt;ordinary&lt;/em&gt; t-statistics from &lt;code&gt;limma&lt;/code&gt; output.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Plain Markdown Post</title>
      <link>https://sahirbhatnagar.github.io/blog/2016/12/30/a-plain-markdown-post/</link>
      <pubDate>Fri, 30 Dec 2016 21:49:57 -0700</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2016/12/30/a-plain-markdown-post/</guid>
      <description>This is a post written in plain Markdown (*.md) instead of R Markdown (*.Rmd). The major differences are:
 You cannot run any R code in a plain Markdown document, whereas in an R Markdown document, you can embed R code chunks (```{r}); A plain Markdown post is rendered through Blackfriday, and an R Markdown document is compiled by rmarkdown and Pandoc.  There are many differences in syntax between Blackfriday&amp;rsquo;s Markdown and Pandoc&amp;rsquo;s Markdown.</description>
    </item>
    
    <item>
      <title>Statistical Power in t tests with Unequal Group Sizes</title>
      <link>https://sahirbhatnagar.github.io/blog/2016/02/25/statistical-power-in-t-tests-with-unequal-group-sizes/</link>
      <pubDate>Thu, 25 Feb 2016 15:09:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2016/02/25/statistical-power-in-t-tests-with-unequal-group-sizes/</guid>
      <description>&lt;p&gt;When performing &lt;a href=&#34;https://en.wikipedia.org/wiki/Student%27s_t-test&#34;&gt;Student&amp;rsquo;s t-test&lt;/a&gt; to compare difference in means between two group, it is a useful exercise to determine the effect of unequal sample sizes in the comparison groups on power. Large imbalances generally will not have adequate statistical power to detect even large effect sizes associated with a factor, leading to a high Type II error rate as shown in the figure below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://sahirbhatnagar.github.io/blog/figure/posts/2016-02-25-power_ttest_sample_size/unnamed-chunk-2-1.png&#34; alt=&#34;plot of chunk unnamed-chunk-2&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Expressions with Facets in ggplot2</title>
      <link>https://sahirbhatnagar.github.io/blog/2016/02/08/ggplot2-facet-wrap-labels/</link>
      <pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2016/02/08/ggplot2-facet-wrap-labels/</guid>
      <description>In this post I show how we can use $\LaTeX$ math expressions to label the panels in facets.
The updated version of ggplot2 V 2.0 has improved the way we can label panels in facet plots with the use of a generic labeller function. The latex2exp package has made it much easier to write $\LaTeX$ expressions in R.
You will need to load the following packages for the code below to work:</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>https://sahirbhatnagar.github.io/blog/2015/07/23/hello-r-markdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2015/07/23/hello-r-markdown/</guid>
      <description>R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
    <item>
      <title>Heatmaps in R</title>
      <link>https://sahirbhatnagar.github.io/blog/2015/06/10/heatmaps-in-r/</link>
      <pubDate>Wed, 10 Jun 2015 15:09:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2015/06/10/heatmaps-in-r/</guid>
      <description>&lt;p&gt;In every statistical analysis, the first thing one should do is try and visualise the data before any modeling. In microarray studies, a common visualisation is a heatmap of gene expression data. In this post I simulate some gene expression data and visualise it using the &lt;code&gt;pheatmap&lt;/code&gt; function from the &lt;a href=&#34;http://cran.r-project.org/web/packages/pheatmap/&#34;&gt;pheatmap&lt;/a&gt; package in &lt;code&gt;R&lt;/code&gt;. You will also need the &lt;code&gt;mvrnorm&lt;/code&gt; function from the &lt;a href=&#34;http://cran.r-project.org/web/packages/MASS/index.html&#34;&gt;MASS&lt;/a&gt; library to simulate from a multivariate normal distribution, and the &lt;code&gt;brewer.pal&lt;/code&gt; function from the &lt;a href=&#34;http://cran.r-project.org/web/packages/RColorBrewer/index.html&#34;&gt;RColorBrewer&lt;/a&gt; library for easier customization of colors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Heatmaps in R</title>
      <link>https://sahirbhatnagar.github.io/blog/2015/06/10/heatmaps/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2015/06/10/heatmaps/</guid>
      <description>
&lt;script src=&#34;{{&lt; blogdown/postref &gt;}}index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;{{&lt; blogdown/postref &gt;}}index_files/htmlwidgets/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;{{&lt; blogdown/postref &gt;}}index_files/d3v3/./d3v3.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;{{&lt; blogdown/postref &gt;}}index_files/d3heatmapcore/heatmapcore.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;{{&lt; blogdown/postref &gt;}}index_files/d3heatmapcore/heatmapcore.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;{{&lt; blogdown/postref &gt;}}index_files/d3v3-tip/index.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;{{&lt; blogdown/postref &gt;}}index_files/d3heatmap-binding/d3heatmap.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;{{&lt; blogdown/postref &gt;}}index_files/plotly-binding/plotly.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;{{&lt; blogdown/postref &gt;}}index_files/typedarray/typedarray.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;{{&lt; blogdown/postref &gt;}}index_files/jquery/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;{{&lt; blogdown/postref &gt;}}index_files/crosstalk/css/crosstalk.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;{{&lt; blogdown/postref &gt;}}index_files/crosstalk/js/crosstalk.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;{{&lt; blogdown/postref &gt;}}index_files/plotly-htmlwidgets-css/plotly-htmlwidgets.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;{{&lt; blogdown/postref &gt;}}index_files/plotly-main/plotly-latest.min.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;In every statistical analysis, the first thing one should do is try and visualise the data before any modeling. In microarray studies, a common visualisation is a heatmap of gene expression data. In this post I simulate some gene expression data and visualise it using the &lt;code&gt;pheatmap&lt;/code&gt; function from the &lt;a href=&#34;http://cran.r-project.org/web/packages/pheatmap/&#34;&gt;pheatmap&lt;/a&gt; package in &lt;code&gt;R&lt;/code&gt;. You will also need the &lt;code&gt;mvrnorm&lt;/code&gt; function from the &lt;a href=&#34;http://cran.r-project.org/web/packages/MASS/index.html&#34;&gt;MASS&lt;/a&gt; library to simulate from a multivariate normal distribution, and the &lt;code&gt;brewer.pal&lt;/code&gt; function from the &lt;a href=&#34;http://cran.r-project.org/web/packages/RColorBrewer/index.html&#34;&gt;RColorBrewer&lt;/a&gt; library for easier customization of colors.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contrasts in R</title>
      <link>https://sahirbhatnagar.github.io/blog/2015/03/04/contrasts-in-r/</link>
      <pubDate>Wed, 04 Mar 2015 15:09:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2015/03/04/contrasts-in-r/</guid>
      <description>&lt;p&gt;In this post I discuss how to create custom contrasts for factor variables in &lt;code&gt;R&lt;/code&gt;. First lets create some simulated data. Create the data, and factor Disease status:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
Disease &lt;- c(rep(&#34;RA&#34;, 5), rep(&#34;SLE&#34;, 5), rep(&#34;Scleroderma&#34;, 5), 
             rep(&#34;Myositis&#34;, 5), rep(&#34;Control&#34;, 5))
set.seed(1234)
sex &lt;-  rbinom(25,1, 0.5)
age &lt;-  rnorm(25, 40, 5)
y &lt;- rnorm(25, 0.5, 0.12)
data &lt;- data.frame(y,sex,age,Disease=factor(Disease))
str(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
## &#39;data.frame&#39;:	25 obs. of  4 variables:
##  $ y      : num  0.506 0.323 0.552 0.492 0.513 ...
##  $ sex    : int  0 1 1 1 1 1 0 0 1 1 ...
##  $ age    : num  44.4 46.9 31.6 36.9 40.1 ...
##  $ Disease: Factor w/ 5 levels &#34;Control&#34;,&#34;Myositis&#34;,..: 3 3 3 3 3 5 5 5 5 5 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We want the following contrasts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Control versus all 4 diseases combined&lt;/li&gt;
&lt;li&gt;RA versus the combination of (SLE, Scleroderma, Myositis), leaving out the Controls&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Gradient Descent</title>
      <link>https://sahirbhatnagar.github.io/blog/2014/11/15/gradient-descent/</link>
      <pubDate>Sat, 15 Nov 2014 15:09:00 +0000</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2014/11/15/gradient-descent/</guid>
      <description>&lt;p&gt;I am taking the Machine Learning course on &lt;a href=&#34;https://class.coursera.org/ml-007/lecture&#34;&gt;Coursera&lt;/a&gt; being taught by Andrew Ng. It is turning out to be useful so far, and he has presented the material clearly. It&amp;rsquo;s a nice introduction to the Machine Learning/Computer Science language, since I come from a statistics background.&lt;/p&gt;
&lt;p&gt;I learned about gradient descent today for simple linear regression. The following is my code in R and I compare it to the &lt;em&gt;lm&lt;/em&gt; function in base &lt;em&gt;R&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CDPATH in Bash</title>
      <link>https://sahirbhatnagar.github.io/blog/2014/07/04/cdpath-in-bash/</link>
      <pubDate>Fri, 04 Jul 2014 11:03:16 -0400</pubDate>
      
      <guid>https://sahirbhatnagar.github.io/blog/2014/07/04/cdpath-in-bash/</guid>
      <description>&lt;p&gt;Instead of constantly typing the full path when using the &lt;code&gt;cd&lt;/code&gt; command, &lt;code&gt;BASH&lt;/code&gt; has a built-in feature called &lt;code&gt;CDPATH&lt;/code&gt;. Thanks to &lt;em&gt;lhunath&lt;/em&gt; who explained in this &lt;a href=&#34;http://stackoverflow.com/questions/670488/how-to-manage-long-paths-in-bash&#34;&gt;SO Post&lt;/a&gt; how to use this feature.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>